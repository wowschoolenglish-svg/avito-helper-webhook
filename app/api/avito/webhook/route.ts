// app/api/avito/webhook/route.ts  (Next.js App Router)
import crypto from "crypto";

export const runtime = "edge"; // –±—ã—Å—Ç—Ä–µ–µ –∏ –¥–µ—à–µ–≤–ª–µ
export const preferredRegion = "fra1"; // –ø–æ –∂–µ–ª–∞–Ω–∏—é

function signOk() {
  return new Response(JSON.stringify({ ok: true }), {
    status: 200,
    headers: { "content-type": "application/json; charset=utf-8" },
  });
}
function unauthorized(msg: string) {
  return new Response(JSON.stringify({ ok: false, error: "Unauthorized", msg }), {
    status: 401,
    headers: { "content-type": "application/json; charset=utf-8" },
  });
}

async function getAccessToken(): Promise<string> {
  const body = new URLSearchParams({
    grant_type: "client_credentials",
    client_id: process.env.AVITO_CLIENT_ID!,
    client_secret: process.env.AVITO_CLIENT_SECRET!,
  });
  const r = await fetch("https://api.avito.ru/token", {
    method: "POST",
    headers: { "content-type": "application/x-www-form-urlencoded" },
    body,
    cache: "no-store",
  });
  const j = await r.json<any>();
  if (!r.ok || !j.access_token) {
    throw new Error(`token fail ${r.status}: ${JSON.stringify(j)}`);
  }
  return j.access_token;
}

async function sendMessage(chatId: string, text: string, token: string) {
  const url = `https://api.avito.ru/messenger/v1/accounts/${process.env.AVITO_USER_ID}/chats/${chatId}/messages`;
  const payload = { type: "text", message: { text } };
  const r = await fetch(url, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "content-type": "application/json; charset=utf-8",
    },
    body: JSON.stringify(payload),
  });
  if (!r.ok) {
    const t = await r.text();
    throw new Error(`send fail ${r.status}: ${t}`);
  }
}

async function buildReplyText(question: string) {
  // –õ—ë–≥–∫–∏–π ¬´—É–º–Ω—ã–π¬ª —à–∞–±–ª–æ–Ω –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (—á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É):
  // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–∏–º OpenAI –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ SDK.
  // –ó–¥–µ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ–π —Ö–∞—Ä–¥–∫–æ–¥-—Å–∫—Ä–∏–ø—Ç (–±—ã—Å—Ç—Ä–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ):
  const base =
    "–ú—ã ‚Äî –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∞ WOW School. –§–æ—Ä–º–∞—Ç—ã: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ 700‚ÇΩ/60 –º–∏–Ω, –ø–∞—Ä–Ω–æ 470‚ÇΩ/45 –º–∏–Ω, –≥—Ä—É–ø–ø–∞ 290‚ÇΩ/45 –º–∏–Ω. –ï—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç/—É—Ä–æ–≤–µ–Ω—å –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è ‚Äì –ø–æ–¥–±–µ—Ä—ë–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.";
  // –ú–æ–∂–Ω–æ —á—É—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–æ–ø—Ä–æ—Å:
  if (/—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º|—Å–∫–æ–ª—å–∫–æ/i.test(question)) return base;
  if (/–ø—Ä–æ–±–Ω/i.test(question)) return "–î–∞, –ø—Ä–æ–±–Ω–æ–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ üòä –ö–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ ‚Äî –¥–Ω—ë–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º? –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç –∏ –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–º–µ—Ä–Ω–æ?";
  if (/–¥–µ—Ç/i.test(question)) return "–° –¥–µ—Ç—å–º–∏ –æ—Ç 7 –ª–µ—Ç —Ä–∞–±–æ—Ç–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ. –ï—Å—Ç—å –¥–æ–±—Ä—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, —É—Ä–æ–∫ 45 –º–∏–Ω. –£–¥–æ–±–Ω–æ –¥–Ω—ë–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º? –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞?";
  return base;
}

export async function POST(req: Request) {
  // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–∫–∞–∫ —Ç—ã –¥–µ–ª–∞–ª –≤ PowerShell)
  const secret = process.env.WEBHOOK_SECRET || "";
  const raw = await req.text();
  const sig = req.headers.get("x-avito-signature") || "";
  const my = crypto.createHmac("sha256", secret).update(raw).digest("hex");
  if (!secret || sig.toLowerCase() !== my) {
    return unauthorized("bad signature");
  }

  // 2) –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏–µ
  let body: any;
  try {
    body = JSON.parse(raw);
  } catch {
    return new Response(JSON.stringify({ ok: false, error: "Bad JSON" }), { status: 400 });
  }

  // 3) –†–∞–∑—Ä—É–ª–∏–≤–∞–µ–º ping
  if (body?.event === "ping") return signOk();

  // 4) –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç—ã
  if (body?.event === "message") {
    const chatId = body?.payload?.chat_id;
    const msg = body?.payload?.message;
    const isIncoming = msg?.direction === "in";
    const text = msg?.text || msg?.content?.text || "";

    // safety guard
    if (chatId && isIncoming && typeof text === "string" && text.trim()) {
      try {
        const reply = await buildReplyText(text);
        const token = await getAccessToken();
        await sendMessage(chatId, reply, token);
      } catch (e: any) {
        // –ª–æ–≥–∏—Ä—É–µ–º –≤ –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤ Vercel Logs
        return new Response(JSON.stringify({ ok: false, error: String(e) }), {
          status: 200,
          headers: { "content-type": "application/json; charset=utf-8" },
        });
      }
    }
    return signOk();
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –æ–∫
  return signOk();
}
